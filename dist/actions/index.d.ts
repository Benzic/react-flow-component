import { propsType, drawTextType, drawLineType, drawTriangleType, drawRoundedType, toolType } from "./../types/index";
export declare class Flow {
    private ctx;
    private nodes;
    private canvas;
    private wrapper;
    private lineCfg;
    private rectCfg;
    private gradConfig;
    private selectArea;
    private activeLines;
    private activeKey;
    private lastMouseUpTime;
    private editLine;
    private activeTool;
    private mouseDownXY;
    private translateX;
    private translateY;
    private singleClick;
    private cancelDBClick;
    private leftMouseDown;
    private drawElement;
    private drawLineModel;
    private lineFormNodeKey;
    private onChange?;
    private onDBClick?;
    private onChangePosition?;
    constructor({ flowNodes, canvas, wrapper, rectConfig, lineConfig, gradConfig, onChange, onDBClick, onChangePosition, }: propsType);
    resetValues(): void;
    initListenEvent(): void;
    throttle: (fn: {
        apply: (arg0: any, arg1: any[]) => void;
    }, t?: number) => (this: any, ...args: any) => void;
    onListenKeyDown: () => void;
    onListenKeyUp: () => void;
    onConectLine: (offsetX: number, offsetY: number) => void;
    onListenMouseMove: (event: MouseEvent) => void;
    onConectNode: (index: number, node: any) => void;
    onListenMouseUp: () => void;
    onDragRect: (event: MouseEvent) => void;
    onListenDBClick(): void;
    onListenOnMouseDown: () => void;
    createResetBtn(): void;
    createLineBtn(): void;
    onDrawLine(): void;
    resize(wrapper: DOMRectReadOnly): void;
    resetPosition(): void;
    render: () => void;
    getRectIndex(key: any): number;
    drawNodeInCanvas: (index: number) => void;
    drawTool: (tool: toolType, node: any) => void;
    drawLineInCanvas: (_Snode: any, index: number) => void;
    initCanvas(): void;
    deleLine(): void;
    deleRect(): void;
    findToolInCanvas(x: number, y: number): any;
    findRectInCanvas(x: number, y: number): any;
    findLeftRightLine(X: number, Y1: number, Y2: number): boolean;
    findCenterLine(X1: number, Y: number, X2: number): boolean;
    findEditLine(): void;
    findLineInCanvas(): void;
    getXY: (margin: any) => {
        x: any;
        x2: any;
        y: any;
        y2: any;
    };
    drawText({ x, y, title, active, hWidth, txtColor, aTextColor, fontSize, margin, align, r, }: drawTextType): void;
    drawLine({ sx, sy, x, y, active, _h, _w, color, aColor, label, }: drawLineType): void;
    dragTriangle({ sy, x, y, _w, _h, _xDev, color, aColor, active, }: drawTriangleType): void;
    drawLineRect(sx: number, sy: number, ex: number, ey: number): void;
    drawRoundedRect({ x, y, r, active, bgImg, hWidth, hHeight, shadowBlur, shadowColor, bgColor, aBgColor, }: drawRoundedType): void;
    drawImage(bgImg: CanvasImageSource, x?: number, y?: number, hWidth?: number, hHeight?: number): void;
    dragSelect(sx?: number, sy?: number, x?: number, y?: number): void;
    drawDrid(): void;
}
